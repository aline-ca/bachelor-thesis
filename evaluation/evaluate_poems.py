#!/usr/bin/env python
# -*- coding: utf-8 -*-

import sys
import csv
from EvaluationUtils import Limerick

#####################################################################
#                                                                   #
# File:                           evaluate_poems.py                 #
# Author:                         Aline Castendiek                  #
# Student ID:                     768297                            #
# Date:                           16/06/18                          #
# Operating system:               Mac OS X El Capitan [10.11.6]     #
# Python version:                 3.5.0                             #
#                                                                   #
#####################################################################

# Read in data from a single file.
def read_in_data(filename):

    with open(filename, "r") as file:
        tsv_reader = csv.reader(file, delimiter=';')

        all_poems = []
        all_phones = []
        current_poem = []
        current_phones = []
        current_line = []
        current_line_phones = []

        for row in tsv_reader:

            # Append words and representation when there is no tag:
            if row[0] != "<poem>" and row[0] != "</poem>" and row[0] != "<line>" and row[0] != "</line>":
                current_line.append(row[0])

                word_repr = row[1]
                # Hand-crafted rules to replace invalid 'IX' and 'NX' phonemes that get generated by G2P:
                word_repr = word_repr.replace('IX','IH')
                word_repr = word_repr.replace('IX1', 'IH1')
                word_repr = word_repr.replace('NX', 'N')

                current_line_phones.append(word_repr)

            if row[0] == "</poem>":
                all_poems.append(current_poem)
                all_phones.append(current_phones)
                current_poem = []
                current_phones = []

            if row[0] == "</line>":
                current_poem.append(current_line)
                current_phones.append(current_line_phones)
                current_line = []
                current_line_phones = []

        return[all_poems, all_phones]

########################################################################################################################


# Evaluation

poems, phonemes = read_in_data("../g2p_processing/g2p_tool_output/2000_different_rand_poems_1_g2p.txt")

assert(len(poems) == len(phonemes))

num_of_poems = len(poems)

has_5_verses = 0
verse_3_4_shorter = 0
verse_count_score = 0.0
metric_score = 0.0
rhyme_score = 0.0

for i in range(len(poems)):

    current_poem = Limerick.Limerick(poems[i], phonemes[i])

    print("Verses:")
    for verse in current_poem.verses:
        print(verse)

    print("Phonemes:")
    for phone in current_poem.phonemes:
        print(phone)

    print('\n')

    print("Syllable counts: " + str(current_poem.syllable_counts))
    print("Verse count score: " + str(current_poem.verse_count_score))
    print("Metric score: " + str(current_poem.metric_score))
    print("Has 5 verses: " + str(current_poem.has_5_verses))
    print("Syllable count: " + str(current_poem.syllable_counts))
    print("Verse 3,4 shorter: " + str(current_poem.verse_3_4_shorter))
    print("Rhyme score: " + str(current_poem.rhyme_score))
    print('\n')

    # Count stuff
    if current_poem.has_5_verses:
        has_5_verses += 1
    if current_poem.verse_3_4_shorter:
        verse_3_4_shorter += 1
    verse_count_score += current_poem.verse_count_score
    metric_score += current_poem.metric_score
    rhyme_score += current_poem.rhyme_score

verse_count_score = verse_count_score / num_of_poems
metric_score = metric_score / num_of_poems
rhyme_score = rhyme_score / num_of_poems

print("EVALUATION RESULTS: ")
print("{} out of {} poems have 5 verses.".format(has_5_verses, num_of_poems))
print("{} out of {} poems have verse 3 and 4 shorter.".format(verse_3_4_shorter, num_of_poems))
print("Overall verse count score: {}".format(verse_count_score))
print("Overall metric score: {}".format(metric_score))
print("Overall rhyme score: {}".format(rhyme_score))
